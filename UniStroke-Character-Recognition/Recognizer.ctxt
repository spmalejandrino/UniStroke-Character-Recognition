#BlueJ class context
comment0.target=Recognizer
comment1.params=
comment1.target=Recognizer()
comment1.text=\r\n\ Constructor\ for\ the\ recognizer\ class.\ Sets\ up\ the\ arrays\ and\ loads\ the\r\n\ base\ set\ from\ an\ existing\ data\ file\ which\ is\ assumed\ to\ have\ the\ right\r\n\ number\ of\ points\ in\ it.\ The\ file\ is\ organized\ so\ that\ there\ are\ 150\r\n\ points\ for\ stroke\ 0\ followed\ by\ 150\ points\ for\ stroke\ 1,\ ...\ 150\ poinpts\r\n\ for\ stroke\ 9.\ Each\ stroke\ is\ organized\ as\ an\ alternating\ series\ of\ x,\ y\r\n\ pairs.\ For\ example,\ stroke\ 0\ consists\ of\ 300\ lines\ with\ the\ first\ line\r\n\ being\ x0\ for\ stroke\ 0,\ the\ next\ line\ being\ y0\ for\ stroke\ 0,\ the\ next\ line\r\n\ being\ x1\ for\ stroke\ 0\ and\ so\ on.\r\n
comment10.params=
comment10.target=int\ findMaxX()
comment10.text=\r\n\ findMaxX\ -\ returns\ the\ largest\ x\ value\ in\ the\ userStroke\ array\ of\ points\r\n
comment11.params=
comment11.target=int\ findMaxY()
comment11.text=\r\n\ findMaxY\ -\ returns\ the\ largest\ y\ value\ in\ the\ userStroke\ array\ of\ points\r\n
comment12.params=
comment12.target=void\ resetUserStroke()
comment13.params=
comment13.target=int\ numUserPoints()
comment14.params=i
comment14.target=int\ getUserPointX(int)
comment15.params=i
comment15.target=int\ getUserPointY(int)
comment16.params=newPoint
comment16.target=void\ addUserPoint(java.awt.Point)
comment2.params=
comment2.target=void\ translate()
comment2.text=\r\n\ translate\ -\ Translates\ the\ points\ in\ the\ userStroke\ array\ by\ sliding\ them\r\n\ as\ far\ to\ the\ upper-left\ as\ possible.\ It\ does\ this\ by\ finding\ the\ minX\r\n\ value\ and\ the\ minY\ value.\ Then\ each\ point\ (x,\ y)\ is\ replaced\ with\ the\r\n\ point\ (x-minX,\ y-minY).\ Note\:\ you\ can\ use\ the\ translate\ method\ of\ the\r\n\ Point\ class\r\n
comment3.params=
comment3.target=void\ scale()
comment3.text=\r\n\ scale\ -\ Scales\ the\ points\ in\ the\ user\ array\ by\ stretching\ the\ user's\r\n\ stroke\ to\ fill\ the\ canvas\ as\ nearly\ as\ possible\ while\ maintaining\ the\r\n\ aspect\ ratio\ of\ the\ stroke.\r\n
comment4.params=
comment4.target=void\ insertOnePoint()
comment4.text=\r\n\ insertOnePoint\ -\ inserts\ a\ new\ point\ between\ the\ two\ points\ that\ are\ the\r\n\ farthest\ apart\ in\ the\ userStroke\ array.\ There\ must\ be\ at\ least\ two\ points\r\n\ in\ the\ array\r\n
comment5.params=
comment5.target=void\ normalizeNumPoints()
comment5.text=\r\n\ normalizeNumPoints\ -\ Adds\ points\ to\ the\ userStroke\ by\ inserting\ points\r\n\ repeatedly\ until\ there\ are\ STROKESIZE\ points\ in\ the\ stroke\r\n
comment6.params=a
comment6.target=int\ computeScore(int)
comment6.text=\r\n\ computeScore\ Computes\ and\ returns\ a\ "score"\ that\ is\ a\ measure\ of\ how\r\n\ closely\ the\ normalized\ userStroke\ array\ matches\ a\ given\ pattern\ array\ in\r\n\ the\ baseset\ array.\ The\ score\ is\ the\ sum\ of\ the\ distances\ between\r\n\ corresponding\ points\ in\ the\ userStroke\ array\ and\ the\ pattern\ array.\r\n\ \r\n\ @param\ digitToCompare\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ index\ of\ the\ pattern\ in\ the\ baseset\ with\ which\ to\ compute\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ score\r\n
comment7.params=
comment7.target=int\ findMatch()
comment7.text=\r\n\ findMatch\ -\ Finds\ and\ returns\ the\ index\ (an\ int)\ of\ the\ base\ set\ pattern\r\n\ which\ most\ closely\ matches\ the\ user\ stroke.\r\n
comment8.params=
comment8.target=int\ findMinX()
comment8.text=\r\n\ findMinX\ -\ returns\ the\ smallest\ x\ value\ in\ the\ userStroke\ array\ of\ points\r\n
comment9.params=
comment9.target=int\ findMinY()
comment9.text=\r\n\ findMinY\ -\ returns\ the\ smallest\ y\ value\ in\ the\ userStroke\ array\ of\ points\r\n
numComments=17
